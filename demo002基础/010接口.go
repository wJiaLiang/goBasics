package main

import (
	"fmt"
)

// Sayer 接口
type Sayer interface {
	say()
}
type dog struct {
	say()
}
type cat struct {
	say()
}
// dog实现了Sayer接口
func (d dog) say() {
	fmt.Println("dog,dog,dog")
}

//接口的实现就是这么简单，只要实现了接口中的所有方法，就实现了这个接口。



func main()  {
	fmt.Println("接口");
	/*
	    接口（interface）定义了一个对象的行为规范，只定义规范不实现，由具体的对象来实现规范的细节。
		interface是一组method的集合
		请牢记接口（interface）是一种类型。

		接口区别于我们之前所有的具体类型，接口是一种抽象的类型。当你看到一个接口类型的值时，
		你不知道它是什么，唯一知道的是通过它的方法能做什么。

	    接口是一个或多个方法签名的集合。

		每个接口由数个方法组成，接口的定义格式如下：

		type 接口类型名 interface{
	        方法名1( 参数列表1 ) 返回值列表1
	        方法名2( 参数列表2 ) 返回值列表2
	        …
	    }

	    1.接口名：使用type将接口定义为自定义的类型名。Go语言的接口在命名时，一般会在单词后面添加er，
			如有写操作的接口叫Writer，有字符串功能的接口叫Stringer等。接口名最好要能突出该接口的类型含义。
		2.方法名：当方法名首字母是大写且这个接口类型名首字母也是大写时，这个方法可以被接口所在的包（package）之外的代码访问。
	    3.参数列表、返回值列表：参数列表和返回值列表中的参数变量名可以省略。


	*/
	/*

	   一个对象只要全部实现了接口中的方法，那么就实现了这个接口。换句话说，接口就是一个需要实现的方法列表。


	*/




	// 如果接口里面有方法的话，必须要通过结构体或者通过自定义类型实现这个接口









}
