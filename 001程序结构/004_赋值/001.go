package main

import (
	"fmt"
	"os"
)

/*
x = 1                       	// 命名变量的赋值
*p = true                   	// 通过指针间接赋值
person.name = "bob"         	// 结构体字段赋值
count[x] = count[x] * scale 	// 数组、slice或map的元素赋值

1、自增和自减是语句，而不是表达式，因此x = i++ 是错误的  (表达式必须返回一个值);

2、元组赋值
	(1) 组赋值是另一种形式的赋值语句，它允许同时更新多个变量的值
	(2) 元组赋值也可以使一系列琐碎赋值更加紧凑（译注: 特别是在for循环的初始化部分），

	(3) 有些表达式会产生多个值，比如调用一个有多个返回值的函数。左边变量的数目必须和右边一致。
		 f, err = os.Open("foo.txt")
	(4) 和变量声明一样，我们可以用下划线空白标识符_来丢弃不需要的值。
		 _, err = io.Copy(dst, src) // 丢弃字节数(丢弃第一个返回值)

3、赋值性（程序中还有很多地方会发生隐式的赋值行为）
	(1) 函数调用会隐式地将调用参数的值赋值给函数的参数变量，
	(2) 一个返回语句会隐式地将返回操作的值赋值给结果变量
	(3) 一个复合类型的字面量 也会产生赋值行为。

	不管是隐式还是显式地赋值，在赋值语句左边的变量和右边最终的求到的值必须有相同的数据类型。
	nil可以赋值给任何指针或引用类型,或变量



*/

func main()  {
	i:=2
	x:=3

	//交互两个变量的值
	i,x = x,i
	fmt.Println(i,x)  // 3,2

	fmt.Println(	os.Open("foo.txt")   )

	medals := []string{"gold", "silver", "bronze"}
	medals[0]="gold"
	fmt.Println(medals)

}
