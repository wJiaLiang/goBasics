package main

import "fmt"

func main()  {
/*
	一、概念
	1、接口（interface）定义了一个对象的行为规范，只定义规范不实现，由具体的对象来实现规范的细节。
	在Go语言中接口（interface）是一种类型，一种抽象的类型。

	通俗的讲接口就一个标准，它是对一个对象的行为和规范进行约定，约定实现接口的对象必 须得按照接口的规范。
	2、为了保护你的Go语言职业生涯，请牢记接口（interface）是一种类型。

	3、接口区别于我们之前所有的具体类型，接口是一种抽象的类型。当你看到一个接口类型的值时，你不知道它是什么，唯一知道的是通过它的方法能做什么。

	二、接口定义
		Golang 中每个接口由数个方法组成，接口的定义格式如下：
		type 接口名 interface{
			方法名 1( 参数列表 1 ) 返回值列表 1
			方法名 2( 参数列表 2 ) 返回值列表 2
			…
		}
	   1.接口名：使用type将接口定义为自定义的类型名。Go语言的接口在命名时，一般会在单词后面添加er，
		如有写操作的接口叫Writer，有字符串功能的接口叫Stringer等。接口名最好要能突出该接口的类型含义。

       2.方法名：当方法名首字母是大写且这个接口类型名首字母也是大写时，这个方法可以被接口所在的包（package）之外的代码访问。

       3.参数列表、返回值列表：参数列表和返回值列表中的参数变量名可以省略。

*/

/*
	三、接口类型变量
	接口类型变量能够存储所有实现了该接口的实例。 例如上面的示例中，Sayer类型的变量能够存储dog和cat类型的变量。

*/
	var x Sayer // 声明一个 Sayer 类型的变量x
	a := cat{}  // 实例化一个cat
	b := dog{}  // 实例化一个dog
	x = a       // 可以把cat实例直接赋值给x
	x.say()     // 喵喵喵
	x = b       // 可以把dog实例直接赋值给x
	x.say()     // 汪汪汪

}

// Sayer 接口
type Sayer interface {
	say()
}

//定义dog和cat两个结构体：
type dog struct {}

type cat struct {}

// dog实现了 Sayer 接口
func (d dog) say() {
	fmt.Println("汪汪汪")
}

// cat实现了 Sayer 接口
func (c cat) say() {
	fmt.Println("喵喵喵")
}
//只要实现了接口中的所有方法，就实现了这个接口。





























