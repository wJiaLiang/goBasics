package main

import "fmt"

func main()  {
	/*
		Golang 内置的运算符
			算术运算符
			关系运算符
			逻辑运算符
			位运算符
			赋值运算符

	1、算数运算符
		运算符 	描述
		+ 		相加
		- 		相减
		* 		相乘
		/ 		相除
		% 		求余=被除数-（被除数/除数）*除数
		++（自增）和--（自减）在 Go 语言中是单独的语句，并不是运算符。

	2、关系运算符
		运算符 	描述
		== 		检查两个值是否相等，如果相等返回 True 否则返回 False。
		!= 		检查两个值是否不相等，如果不相等返回 True 否则返回 False。
		> 		检查左边值是否大于右边值，如果是返回 True 否则返回 False。
		>= 		检查左边值是否大于等于右边值，如果是返回 True 否则返回 False。
		< 		检查左边值是否小于右边值，如果是返回 True 否则返回 False。
		<= 		检查左边值是否小于等于右边值，如果是返回 True 否则返回 False。

	3、逻辑运算符
		运算符 	描述
		&& 		逻辑 AND 运算符。 如果两边的操作数都是 True，则为 True，否则为 False。
		|| 		逻辑 OR 运算符。 如果两边的操作数有一个 True，则为 True，否则为 False。
		! 		逻辑 NOT 运算符。 如果条件为 True，则为 False，否则为 True。

	4、赋值运算符
		运算符 	描述
		= 		简单的赋值运算符，将一个表达式的值赋给一个左值
		+= 		相加后再赋值
		-= 		相减后再赋值
		*= 		相乘后再赋值
		/= 		相除后再赋值
		%= 		求余后再赋值

	5、位运算符(了解)
		位运算符对整数在内存中的二进制位进行操作
		运算符	描述
		& 		参与运算的两数各对应的二进位相与。 （两位均为 1 才为 1）
		| 		参与运算的两数各对应的二进位相或。 （两位有一个为 1 就为 1）
		^ 		参与运算的两数各对应的二进位相异或，当两对应的二进位相异时，结果为 1。（两位不一样则为 1）
		<< 		左移 n 位就是乘以 2 的 n 次方。 “a<<b”是把 a 的各二进位全部左移 b 位，高位 丢弃，低位补 0。
		>> 		右移 n 位就是除以 2 的 n 次方。 “a>>b”是把 a 的各二进位全部右移 b 位。



	*/

	var a int = 5 	// 101
	var b int = 2 	// 010
	fmt.Println("a&b=", a&b) 	// 000 值 0
	fmt.Println("a|b=", a|b) 	// 111 值 7
	fmt.Println("a^b=", a^b) 	// 111 值 7
	fmt.Println("5>>2=", a>>b)  // 5 右移 2 位 1
	fmt.Println("5<<2=", a<<b)  // 5 左移 2 位 10100
	fmt.Println("5<<1=", 5<<1)  // 1010
	fmt.Println("5>>1=", 5>>1)  // 10
	fmt.Println("7>>2=", 7>>2)  // 1

	c:= a<<b
	fmt.Println(c) 	// 20





}
