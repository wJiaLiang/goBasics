package main

import (
	"fmt"
)

func main()  {
/*
	一、字符串的值可以直接写成字符串字面量，形式上就是带双引号的字节序列;
		var str:string = "Hello,world"
		因为Go语言源文件总是用UTF8编码，并且Go语言的文本字符串也以UTF8编码的方式处理，因此我们可以将Unicode码点也写到字符串面值中
		在一个双引号包含的字符串面值中，可以用以反斜杠\开头的转义序列插入任意的数据
		\a      响铃
   		\b      退格
   		\f      换页
   		\n      换行
   		\r      回车
   		\t      制表符
   		\v      垂直制表符
   		\'      单引号 (只用在 '\'' 形式的rune符号面值中)
   		\"      双引号 (只用在 "..." 形式的字符串面值中)
   		\\      反斜杠


	二、多行字符串
	 原生的字符串面值形式是`` 使用反引号代替双引号 没有转义操作，全部的内容都是字面的意思
	 原生字符串面值用于编写正则表达式会很方便，因为正则表达式往往会包含很多反斜杠
	 原生字符串面值同时被广泛应用于HTML模板、JSON面值、命令行提示信息以及那些需要扩展到多行的场景。
		const `Hello
				world`

	三、Unicode 编码
		它收集了这个世界上所有的符号系统，每个符号都分配一个唯一的Unicode码点
		Unicode码点对应Go语言中的rune整数类型（译注：rune是int32等价类型）
		我们可以将一个符文序列表示为一个int32序列。这种编码方式叫UTF-32或UCS-4，每个Unicode码点都用同样大小的32bit来表示。
		这种方式比较简单统一,但是它会浪费很多存储空间

	四、UTF-8
		UTF8是一个将Unicode码点编码为字节序列的变长编码。
		UTF8编码使用1到4个字节来表示每个Unicode码点
		ASCII部分字符只使用1个字节，常用字符部分使用2或3个字节表示
		每个符号编码后第一个字节的高端bit位用于表示编码总共有多少个字节。如果第一个字节的高端bit为0，则表示对应7bit的ASCII字符


		Go语言的源文件采用UTF8编码，并且Go语言处理UTF8编码的文本也很出色。
		unicode包提供了诸多处理rune字符相关功能的函数（比如区分字母和数字，或者是字母的大写和小写转换等
		unicode/utf8包则提供了用于rune字符序列的UTF8编码和解码的功能。




*/


	b1()

}

func b1()  {
	fmt.Print("\a")
	fmt.Print(`abc 这种形式的字符串没有转义操作`)

	fmt.Print(powerf3(2,16))  // 65535


}

func powerf3(x float64, n int) float64 {
	ans := 1.0
	for n != 0 {
		ans *= x
		n--
	}
	return ans
}